generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:Sjec@2025@104.197.101.160:3306/skylearn"
}

model ASSIGNMENT {
  assignment_id Int       @id @default(autoincrement())
  title         String    @db.VarChar(100)
  description   String?   @db.Text
  due_date      DateTime? @db.Date
  courseWorkId  String    @db.VarChar(255)
  course_id     Int?
}

model CERTIFICATES {
  id              Int       @id @default(autoincrement())
  student_id      Int
  course_id       Int
  certificate_id  String    @unique(map: "certificate_id") @db.VarChar(255)
  certificate_url String    @db.VarChar(255)
  issuedDate      DateTime? @default(now()) @db.DateTime(0)
  STUDENT         STUDENT   @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction, map: "CERTIFICATES_ibfk_1")
  COURSE          COURSE    @relation(fields: [course_id], references: [course_id], onDelete: NoAction, onUpdate: NoAction, map: "CERTIFICATES_ibfk_2")

  @@index([course_id], map: "course_id")
  @@index([student_id], map: "student_id")
}

model COURSE {
  course_id               Int                 @id @default(autoincrement())
  course_name             String              @db.VarChar(100)
  course_description      String?             @db.Text
  difficulty              COURSE_difficulty
  course_price            Decimal             @db.Decimal(10, 2)
  enrollment_deadline     DateTime?           @db.Date
  course_duration         String?             @db.Text
  course_enrolments       Int?
  googleClassroomId       String?             @unique(map: "googleClassroomId") @db.VarChar(255)
  googleClassroomJoinLink String?             @db.VarChar(255)
  youtube_link            String?             @db.VarChar(255)
  status                  COURSE_status?      @default(active)
  googleClassroomLink     String?             @db.VarChar(255)
  CERTIFICATES            CERTIFICATES[]
  COURSE_CERTIFICATE      COURSE_CERTIFICATE?
  ENROLLMENT              ENROLLMENT[]
  LEADERBOARD             LEADERBOARD[]
  NOTES                   NOTES[]
  QUIZ                    QUIZ[]
  QUIZ_RESULTS            QUIZ_RESULTS[]
  STUDENTCLASSES          STUDENTCLASSES[]
  TEACHING                TEACHING[]
  livestreams             livestreams[]
  user_tokens             user_tokens[]
}

model COURSE_CERTIFICATE {
  course_id      Int    @id
  certificate_id Int?
  COURSE         COURSE @relation(fields: [course_id], references: [course_id], onDelete: Cascade, map: "COURSE_CERTIFICATE_ibfk_1")

  @@index([certificate_id], map: "certificate_id")
}

model EARNED_CERTIFICATE {
  student_id     Int
  certificate_id Int
  STUDENT        STUDENT @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: NoAction, map: "EARNED_CERTIFICATE_ibfk_1")

  @@id([student_id, certificate_id])
  @@index([certificate_id], map: "certificate_id")
}

model ENROLLMENT {
  student_id        Int
  course_id         Int
  course_completion Boolean? @default(false)
  STUDENT           STUDENT  @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: NoAction, map: "ENROLLMENT_ibfk_1")
  COURSE            COURSE   @relation(fields: [course_id], references: [course_id], onDelete: Cascade, map: "ENROLLMENT_ibfk_2")

  @@id([student_id, course_id])
  @@index([course_id], map: "course_id")
}

model LEADERBOARD {
  course_id   Int
  student_id  Int
  rank        Int?
  score       Int?
  marksStatus String? @default("Not Graded") @db.VarChar(255)
  COURSE      COURSE  @relation(fields: [course_id], references: [course_id], onDelete: Cascade, map: "LEADERBOARD_ibfk_1")
  STUDENT     STUDENT @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: NoAction, map: "LEADERBOARD_ibfk_2")

  @@id([course_id, student_id])
  @@index([student_id], map: "student_id")
}

model NOTES {
  id         Int    @id @default(autoincrement())
  course_id  Int
  note_title String @db.VarChar(255)
  note_text  String @db.Text
  COURSE     COURSE @relation(fields: [course_id], references: [course_id], onDelete: NoAction, onUpdate: NoAction, map: "NOTES_ibfk_1")

  @@index([course_id], map: "course_id")
}

model QUIZ {
  question_id     Int     @id @default(autoincrement())
  course_id       Int?
  question_number Int
  question_text   String  @db.Text
  choice_1        String? @db.VarChar(255)
  choice_2        String? @db.VarChar(255)
  choice_3        String? @db.VarChar(255)
  choice_4        String? @db.VarChar(255)
  correct_choice  Int
  COURSE          COURSE? @relation(fields: [course_id], references: [course_id], onDelete: Cascade, map: "QUIZ_ibfk_1")

  @@unique([course_id, question_number], map: "course_id")
}

model QUIZ_RESULTS {
  result_id   Int      @id @default(autoincrement())
  user_id     Int?
  course_id   Int?
  total_score Int?
  is_passed   Boolean?
  COURSE      COURSE?  @relation(fields: [course_id], references: [course_id], onDelete: Cascade, map: "QUIZ_RESULTS_ibfk_1")

  @@unique([user_id, course_id], map: "user_id")
  @@index([course_id], map: "QUIZ_RESULTS_ibfk_1")
}

model STUDENT {
  student_id         Int                  @id @default(autoincrement())
  student_name       String               @db.VarChar(100)
  student_email      String               @unique @db.VarChar(100)
  user_id            String               @db.VarChar(255)
  address            String?              @db.VarChar(255)
  CERTIFICATES       CERTIFICATES[]
  EARNED_CERTIFICATE EARNED_CERTIFICATE[]
  ENROLLMENT         ENROLLMENT[]
  LEADERBOARD        LEADERBOARD[]
  STUDENTCLASSES     STUDENTCLASSES[]
  SUBMISSION         SUBMISSION[]
  user_tokens        user_tokens[]
}

model STUDENTCLASSES {
  id                Int         @id @default(autoincrement())
  student_id        Int
  course_id         Int
  livestreaming_id  Int
  attended_duration Int?
  status            String?     @db.VarChar(255)
  attendance_date   DateTime?   @default(now()) @db.DateTime(0)
  STUDENT           STUDENT     @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction, map: "STUDENTCLASSES_ibfk_1")
  COURSE            COURSE      @relation(fields: [course_id], references: [course_id], onDelete: NoAction, onUpdate: NoAction, map: "STUDENTCLASSES_ibfk_2")
  livestreams       livestreams @relation(fields: [livestreaming_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "STUDENTCLASSES_ibfk_3")

  @@index([course_id], map: "course_id")
  @@index([livestreaming_id], map: "livestreaming_id")
  @@index([student_id], map: "student_id")
}

model SUBMISSION {
  id            Int     @id @default(autoincrement())
  courseWorkId  String  @db.VarChar(255)
  grade         Float   @db.Float
  course_id     Int
  student_name  String  @db.VarChar(255)
  student_email String  @db.VarChar(255)
  STUDENT       STUDENT @relation(fields: [student_email], references: [student_email], onDelete: Cascade, map: "fk_student_email")

  @@index([student_email], map: "fk_student_email")
}

model TEACHING {
  tutor_id  Int
  course_id Int
  TUTOR     TUTOR  @relation(fields: [tutor_id], references: [tutor_id], onDelete: Cascade, onUpdate: NoAction, map: "TEACHING_ibfk_1")
  COURSE    COURSE @relation(fields: [course_id], references: [course_id], onDelete: Cascade, onUpdate: NoAction, map: "TEACHING_ibfk_2")

  @@id([tutor_id, course_id])
  @@index([course_id], map: "course_id")
}

model TUTOR {
  tutor_id    Int           @id @default(autoincrement())
  tutor_name  String        @db.VarChar(100)
  tutor_email String        @unique(map: "tutor_email") @db.VarChar(100)
  department  String?       @db.VarChar(100)
  user_id     String        @db.VarChar(255)
  address     String?       @db.VarChar(255)
  TEACHING    TEACHING[]
  livestreams livestreams[]
}

model livestreams {
  id                                                 Int                @id @default(autoincrement())
  duration                                           Int?
  status                                             livestreams_status @default(inactive)
  course_id                                          Int
  tutor_id                                           Int
  title                                              String             @db.VarChar(255)
  description                                        String?            @db.Text
  datetime                                           DateTime?          @db.Date
  refLiveId                                          Int?
  STUDENTCLASSES                                     STUDENTCLASSES[]
  COURSE                                             COURSE             @relation(fields: [course_id], references: [course_id], onDelete: NoAction, onUpdate: NoAction, map: "livestreams_ibfk_1")
  TUTOR                                              TUTOR              @relation(fields: [tutor_id], references: [tutor_id], onDelete: NoAction, onUpdate: NoAction, map: "livestreams_ibfk_2")
  user_tokens_user_tokens_livestream_idTolivestreams user_tokens[]      @relation("user_tokens_livestream_idTolivestreams")
  user_tokens_user_tokens_refLiveIdTolivestreams     user_tokens[]      @relation("user_tokens_refLiveIdTolivestreams")

  @@index([course_id], map: "course_id")
  @@index([tutor_id], map: "tutor_id")
}

model user_tokens {
  id                                                 Int          @id @default(autoincrement())
  user_id                                            Int?
  token                                              String?      @db.VarChar(500)
  created_at                                         DateTime?    @default(now()) @db.Timestamp(0)
  expires_at                                         DateTime?    @db.Timestamp(0)
  course_id                                          Int?
  livestream_id                                      Int?
  refLiveId                                          Int?
  COURSE                                             COURSE?      @relation(fields: [course_id], references: [course_id], onUpdate: NoAction, map: "fk_course_id")
  livestreams_user_tokens_livestream_idTolivestreams livestreams? @relation("user_tokens_livestream_idTolivestreams", fields: [livestream_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_livestream_id")
  livestreams_user_tokens_refLiveIdTolivestreams     livestreams? @relation("user_tokens_refLiveIdTolivestreams", fields: [refLiveId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_refLiveId")
  STUDENT                                            STUDENT?     @relation(fields: [user_id], references: [student_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")

  @@index([course_id], map: "fk_course_id")
  @@index([livestream_id], map: "fk_livestream_id")
  @@index([refLiveId], map: "fk_refLiveId")
  @@index([user_id], map: "fk_user_id")
}

enum livestreams_status {
  inactive
  active
  ended
}

enum COURSE_difficulty {
  basic
  intermediate
  advanced
}

enum COURSE_status {
  active
  ended
}
