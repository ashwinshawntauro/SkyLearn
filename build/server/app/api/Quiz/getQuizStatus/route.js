"use strict";(()=>{var e={};e.id=7700,e.ids=[7700],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},22161:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>h,patchFetch:()=>x,requestAsyncStorage:()=>l,routeModule:()=>c,serverHooks:()=>g,staticGenerationAsyncStorage:()=>m});var s={};r.r(s),r.d(s,{GET:()=>d});var u=r(73278),a=r(45002),i=r(54877),o=r(53524),n=r(71309);let p=new o.PrismaClient;async function d(e){let t=e.nextUrl.searchParams.get("courseId"),r=e.nextUrl.searchParams.get("userId");if(!t||!r)return n.NextResponse.json({error:"Missing courseId or userId"},{status:400});try{if(await p.qUIZ_RESULTS.findFirst({where:{course_id:Number(t),user_id:Number(r)}}))return n.NextResponse.json({quiz_attempted:!0,message:"You have already completed this quiz."});return n.NextResponse.json({quiz_attempted:!1,message:"You have not attempted this quiz yet."})}catch(e){return console.error("Error checking quiz status:",e),n.NextResponse.json({error:"Internal server error"},{status:500})}}let c=new u.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/Quiz/getQuizStatus/route",pathname:"/api/Quiz/getQuizStatus",filename:"route",bundlePath:"app/api/Quiz/getQuizStatus/route"},resolvedPagePath:"D:\\skylearn\\src\\app\\api\\Quiz\\getQuizStatus\\route.js",nextConfigOutput:"",userland:s}),{requestAsyncStorage:l,staticGenerationAsyncStorage:m,serverHooks:g}=c,h="/api/Quiz/getQuizStatus/route";function x(){return(0,i.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:m})}}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[9379,4833],()=>r(22161));module.exports=s})();