"use strict";(()=>{var e={};e.id=6419,e.ids=[6419],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},32441:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>m,patchFetch:()=>h,requestAsyncStorage:()=>l,routeModule:()=>c,serverHooks:()=>x,staticGenerationAsyncStorage:()=>g});var s={};t.r(s),t.d(s,{GET:()=>d});var n=t(73278),a=t(45002),o=t(54877),u=t(53524),i=t(71309);let p=new u.PrismaClient;async function d(e){try{let{searchParams:r}=new URL(e.url),t=r.get("courseId"),s=r.get("studentId");if(!t||!s)return i.NextResponse.json({error:"Missing courseId or studentId"},{status:400});let n=parseInt(t,10),a=parseInt(s,10),o=await p.$queryRaw`
      CALL calculate_attendance_and_quiz_status(${n}, ${a});
    `;if(!o||!(o.length>0))return i.NextResponse.json({error:"No data returned from the stored procedure"},{status:404});{let e=o[0];return i.NextResponse.json(e)}}catch(e){return console.error("Error fetching attendance and quiz status:",e),i.NextResponse.json({error:"Internal Server Error"},{status:500})}finally{await p.$disconnect()}}let c=new n.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/getProgress/route",pathname:"/api/getProgress",filename:"route",bundlePath:"app/api/getProgress/route"},resolvedPagePath:"D:\\skylearn\\src\\app\\api\\getProgress\\route.js",nextConfigOutput:"",userland:s}),{requestAsyncStorage:l,staticGenerationAsyncStorage:g,serverHooks:x}=c,m="/api/getProgress/route";function h(){return(0,o.patchFetch)({serverHooks:x,staticGenerationAsyncStorage:g})}}};var r=require("../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[9379,4833],()=>t(32441));module.exports=s})();